/**
 * Copyright (C) 2021-2022 Zukaritasu
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package org.zuky.dialogs;

/**
 * In case one of the WinAPI functions behaves in a way or returns an
 * invalid value, an exception can be thrown in case the last error
 * that occurred is available.
 * 
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/errhandlingapi/nf-errhandlingapi-getlasterror">
 * 	GetLastError function
 * </a>
 * @see <a href="https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-formatmessage">
 * 	FormatMessage function - Win32
 * </a>
 * @author Zukaritasu
 *
 */
public class WindowsException extends RuntimeException {
	
	private static final long serialVersionUID = 2644189949941497397L;

	/**
	 * Error code generated by WinApi function. With the {@link #getFormatMessage(int)}
	 * function you can get the description of the error code
	 */
	private int code;

	/**
	 * The error message. The error message is based on the error code only in
	 * case the {@link #WindowsException(int)} constructor has been called.
	 */
	private String message;
	
	static {
		NativeLibrary.loadLibrary();
	}
	
	/**
	 * Creates a new instance of the class specifying an error message produced
	 * by a Win32 function.
	 * 
	 * @param message Error message
	 */
	public WindowsException(String message) {
		this.message = message;
	}
	
	/**
	 * Creates a new instance of the class specifying an error code produced
	 * by a Win32 function.
	 * 
	 * @param code Error code generated
	 * @see <a href="https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/18d8fbe8-a967-4f1c-ae50-99ca8e491d2d">
	 * 	2.2 Win32 Error Codes
	 * </a>
	 * @throws IllegalArgumentException A 0 was entered as error code
	 */
	public WindowsException(int code) {
		if (code == 0) 
			throw new IllegalArgumentException("This error code is invalid 0");
		this.code = code;
		this.message = getFormatMessage(code);
	}
	
	/**
	 * Returns the error code of the exception
	 * 
	 * @return code error
	 */
	public int getCode() {
		return code;
	}
	
	@Override
	public String getMessage() {
        return message;
    }
	
	private static native String getFormatMessage(int code);
}